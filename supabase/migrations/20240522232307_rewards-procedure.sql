create table "utils"."PreviousTeamStats" (
    "id" bigint generated by default as identity not null,
    "TeamID" uuid not null,
    "PreviousTotalScore" integer not null default 0
);

alter table "utils"."PreviousTeamStats" enable row level security;
CREATE UNIQUE INDEX "PreviousTeamStats_pkey" ON utils."PreviousTeamStats" USING btree (id);
alter table "utils"."PreviousTeamStats" add constraint "PreviousTeamStats_pkey" PRIMARY KEY using index "PreviousTeamStats_pkey";
alter table "utils"."PreviousTeamStats" add constraint "PreviousTeamStats_TeamID_fkey" FOREIGN KEY ("TeamID") REFERENCES "Teams"("TeamID") ON UPDATE CASCADE ON DELETE CASCADE not valid;
alter table "utils"."PreviousTeamStats" validate constraint "PreviousTeamStats_TeamID_fkey";

set check_function_bodies = off;

CREATE OR REPLACE PROCEDURE utils.issue_nightly_rewards()
 LANGUAGE plv8
 SECURITY DEFINER
AS $$
  // Get list of current team stats
  const team_stats = plv8.execute(`select * from public."TeamStats";`);

  // Loop through all team stats rows
  for (ts of team_stats) {
    // Get the existing previous stats for the team
    const exists = plv8.execute(`select * from utils."PreviousTeamStats" where "TeamID" = $1 limit 1;`, [ts.TeamID]);

    // If no previous stats exist, create them
    if (exists.length === 0) {
      plv8.execute(`insert into utils."PreviousTeamStats" ("TeamID", "PreviousTotalScore") values ($1, $2);`, [ts.TeamID, ts.TotalScore ?? 0]);
      continue;
    }

    // Get relevant event data
    const event = plv8.execute(`select * from public."Events" where "EventID" = $1 limit 1;`, [ts.BelongsToEventID])[0];

    // Calculate difference between current and previous total score
    const difference = (ts.TotalScore ?? 0) - exists[0].PreviousTotalScore;

    // Get current reward count
    let rewards = plv8.execute(`select "RewardCount" from public."Teams" where "TeamID" = $1 limit 1;`, [ts.TeamID])[0].RewardCount;

    // Add rewards depending on tier thresholds and current difference
    if (difference >= event.RewardTierThreeThreshold) {
      rewards += 3;
    } else if (difference >= event.RewardTierTwoThreshold) {
      rewards += 2;
    } else if (difference >= event.RewardTierOneThreshold) {
      rewards += 1;
    }

    // Update team rewards
    plv8.execute(`update public."Teams" set "RewardCount" = $1 where "TeamID" = $2;`, [rewards, ts.TeamID]);

    // Update previous stats
    plv8.execute(`update utils."PreviousTeamStats" set "PreviousTotalScore" = $1 where "TeamID" = $2;`, [ts.TotalScore ?? 0, ts.TeamID]);
    plv8.elog(NOTICE, difference, rewards);
  }
$$;

-- Issue team rewards every night at midnight
SELECT cron.schedule('issue-nightly-rewards', '0 0 * * *', 'call utils.issue_nightly_rewards();');
